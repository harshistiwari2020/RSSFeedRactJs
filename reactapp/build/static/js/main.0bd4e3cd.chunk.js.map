{"version":3,"sources":["components/FeedCard.js","components/Feeds.js","components/URLForm.js","App.js","serviceWorker.js","index.js"],"names":["colors","FeedCard","rss_feed","Card","centered","fluid","color","Math","floor","random","length","header","meta","description","onClick","e","d","window","open","Feeds","feeds","List","map","feed","Item","key","URLForm","onNewRssFeed","useState","url","setURL","Form","Field","Input","placeholder","value","onChange","target","Button","a","myHeaders","Headers","append","raw","JSON","stringify","requestOptions","method","headers","body","redirect","fetch","then","response","text","result","parse","console","log","catch","error","App","setFeeds","className","Container","style","marginTop","new_feeds","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gRAIaA,EAAS,CAAC,MAAM,SAAS,SAAS,QAAQ,QAAQ,OAAO,OAAO,SAAS,SAAS,OAAO,QAAQ,OAAO,SAiBtGC,EAfE,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACf,kBAACC,EAAA,EAAD,CAAMC,UAAQ,EAACC,OAAK,EACpBC,MAAQN,EAAOO,KAAKC,MAAMD,KAAKE,SAAST,EAAOU,SAE7CC,OAAQT,EAAQ,MAChBU,KAAMV,EAAQ,UACdW,YAAaX,EAAQ,QACrBY,QAAS,SAACC,EAAGC,GACTC,OAAOC,KAAKhB,EAAQ,KAAU,c,SCVzBiB,EAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAOtB,OACE,kBAACC,EAAA,EAAD,KACGD,EAAME,KAAI,SAACC,GAIV,OAEE,kBAACF,EAAA,EAAKG,KAAN,CAAWC,IAAKF,EAAI,MAClB,kBAAC,EAAD,CAAUrB,SAAUqB,U,qDCjBnBG,EAAU,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EACrBC,mBAAS,IADY,mBACpCC,EADoC,KAC/BC,EAD+B,KAG3C,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,kBAACC,EAAA,EAAD,CACEC,YAAY,wBACZC,MAAON,EACPO,SAAU,SAACrB,GAAD,OAAOe,EAAOf,EAAEsB,OAAOF,WAKrC,kBAACJ,EAAA,EAAKC,MAAN,KACE,kBAACM,EAAA,EAAD,CACExB,QAAO,sBAAE,gCAAAyB,EAAA,6DAGHC,EAAY,IAAIC,SACVC,OAAO,eAAgB,oBAE7BC,EAAMC,KAAKC,UAAU,CAAE,IAAOhB,IAE9BiB,EAAiB,CACnBC,OAAQ,OACRC,QAASR,EACTS,KAAMN,EACNO,SAAU,UAZL,SAegBC,MAAM,aAAcL,GACxCM,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAUG,GACdA,EAASX,KAAKY,MAAMD,GACpBE,QAAQC,IAAI,mBACZD,QAAQC,IAAIH,GAKZ5B,EAAa4B,MAYdI,OAAM,SAACC,GAAD,OAAWH,QAAQC,IAAI,QAASE,MArClC,0DADX,aCGOC,MAff,WAAgB,IAAD,EACajC,mBAAS,IADtB,mBACNR,EADM,KACC0C,EADD,KAGb,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,UAAW,KAC7B,kBAAC,EAAD,CAASvC,aAAc,SAACwC,GAAD,OAAeL,EAASK,MAG/C,kBAAC,EAAD,CAAO/C,MAAOA,OCHFgD,QACW,cAA7BnD,OAAOoD,SAASC,UAEe,UAA7BrD,OAAOoD,SAASC,UAEhBrD,OAAOoD,SAASC,SAASC,MACvB,2D,OCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMsB,c","file":"static/js/main.0bd4e3cd.chunk.js","sourcesContent":["import React from 'react'\nimport { Card } from 'semantic-ui-react'\n\n\nexport const colors = [\"red\",\"orange\",\"yellow\",\"olive\",\"green\",\"teal\",\"blue\",\"violet\",\"purple\",\"pink\",\"brown\",\"grey\",\"black\"]\n\nconst FeedCard = ({rss_feed}) => (\n  <Card centered fluid\n  color= {colors[Math.floor(Math.random()*colors.length)]}\n    // href={rss_feed[\"link\"]}\n    header={rss_feed[\"title\"]}\n    meta={rss_feed[\"published\"]}\n    description={rss_feed[\"summary\"]}\n    onClick={(e, d)=>{\n        window.open(rss_feed[\"link\"], \"_blank\")\n        // console.log(e, d)\n        // console.log(\"Clicked\")\n    }}\n  />\n)\n\nexport default FeedCard\n","import React from \"react\";\nimport FeedCard from './FeedCard.js'\nimport { List, Header, Rating } from \"semantic-ui-react\";\n\nexport const Feeds = ({ feeds }) => {\n  // const min = 1;\n  // const max = 100;\n  // const rand = min + Math.random() * (max - min);   \n  // console.log(\"In here\");\n  // console.log(names);\n  // var i = 1\n  return (\n    <List>\n      {feeds.map((feed) => {\n          // i+=1;\n          // console.log(i);\n          \n        return (\n          // <FeedCard rss_feed={feed}/>\n          <List.Item key={feed[\"link\"]}>\n            <FeedCard rss_feed={feed}/>\n          </List.Item>\n        );\n      })}\n    </List>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Form, Input, Rating, Button } from \"semantic-ui-react\";\n\nexport const URLForm = ({ onNewRssFeed }) => {\n  const [url, setURL] = useState(\"\");\n\n  return (\n    <Form>\n      <Form.Field>\n        <Input\n          placeholder=\"Enter RSS Feed URL...\"\n          value={url}\n          onChange={(e) => setURL(e.target.value)}\n        />\n      </Form.Field>\n\n\n      <Form.Field>\n        <Button\n          onClick={async () => {\n            // console.log(name, temprature);\n\n            var myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/json\");\n\n            var raw = JSON.stringify({ \"url\": url });\n\n            var requestOptions = {\n              method: \"POST\",\n              headers: myHeaders,\n              body: raw,\n              redirect: \"follow\",\n            };\n\n            const response = await fetch(\"/get_feeds\", requestOptions)\n              .then((response) => response.text())\n              .then(function (result) {\n                result = JSON.parse(result);\n                console.log(\"response Worked\");\n                console.log(result)\n                // console.log(name);\n\n\n                // Try to use this\n                onNewRssFeed(result);\n                \n                \n                //   onNewMovie(movie);\n                // setName(\"\");\n                // setTemprature(1);\n                // console.log(result);\n                // console.log(typeof result);\n                // console.log(JSON.parse(result));\n                \n                \n              })\n              .catch((error) => console.log(\"error\", error));\n\n            // const movie = { title, rating };\n            // const response = await fetch(\"/get_name\", {\n            //   method: \"GET\",\n            //   headers: {\n            //     \"Content-Type\": \"application/json\",\n            //   },\n            //   headers: JSON.stringify({ name: name, temprature: temprature }),\n            //   //   body: JSON.stringify(movie),\n            // });\n            // if (response.ok) {\n            //   console.log(\"response Worked\");\n            //   console.log(name);\n            //   onNewName(name);\n            //   //   onNewMovie(movie);\n            //   setName(\"\");\n            //   setTemprature(1);\n            // }\n          }}\n        >\n          submit\n        </Button>\n      </Form.Field>\n    </Form>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Container } from \"semantic-ui-react\";\nimport { Feeds } from \"./components/Feeds\";\nimport { URLForm } from \"./components/URLForm\";\n\nfunction App() {\n  const [feeds, setFeeds] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <Container style={{ marginTop: 40 }}>\n        <URLForm onNewRssFeed={(new_feeds) => setFeeds(new_feeds)} />\n        \n        \n        <Feeds feeds={feeds} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}